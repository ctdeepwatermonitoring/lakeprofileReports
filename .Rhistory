"<br>Parameters:", RefPts$Parameters),
label = ~as.character(RefPts$Station_Name, RefPts$Approximate_Depth))%>%
addCircleMarkers(data=RefPts[RefPts$StationType == 'IEC',],
lng= ~Longitude,
lat= ~Latitude,
radius = 2,
color = 'salmon',
popup=~paste(RefPts$StationType, "<br> Station_Name:", RefPts$Station_Name,
"<br>Depth:", RefPts$Approximate_Depth,
"<br>Schedule:", RefPts$Schedule,
"<br>Sampling Dates:", RefPts$`Sampling Dates`,
"<br>Parameters:", RefPts$Parameters),
label = ~as.character(RefPts$Station_Name, RefPts$Approximate_Depth))%>%
##addLayersControl(overlayGroups = c('CTDEEP', 'UCONN', 'IEC'),           options=layersControlOptions(collapsed=FALSE),
##  position = 'bottomleft')%>%
addLegend("bottomright",
pal=pal,
values  = RefPts$StationType,
title= "Long Island Sound <br> Monitoring Stations")
pal <- palette = c('blue', 'yellow', 'salmon')
pal <- palette = c('blue', 'yellow', 'salmon')
pal <- colorFactor(palette = c('blue', 'yellow', 'salmon'))
pal <- colorFactor(
palette = c('blue', 'yellow', 'salmon'), # Add more colors if needed
domain = RefPts$StationType
)
addLegend("bottomright",
pal=pal,
values  = RefPts$StationType,
title= "Long Island Sound <br> Monitoring Stations")
mRefPt
addLegend("bottomright",
pal=pal,
values  = RefPts$StationType,
title= "Long Island Sound <br> Monitoring Stations")
date <- "2024-06-28"
datetime <- as.POSIXct(date, format="%Y-%m-%d")
datetime
library(lubridate)
datetime <- as.POSIXct(date, format="%Y-%m-%d")
datetime
datetime <- as.POSIXct(date, format="%Y-%m-%d %H:%M:%S")
date <- "2024-06-28"
library(lubridate)
datetime <- as.POSIXct(date, format="%Y-%m-%d %H:%M:%S")
datetime
time <- "9:56"
timel <- hm(time)
timel <- as.POSIXct(time)
timel <- as.POSIXct(time, format = "%H:%M:%S")
timel <- hms(time, format = "%H:%M:%S)
timel <- hms(time)
timehms <- hms(time)
timehms
#script to make the html plots and save them
#and also create the rmd on a loop
setwd("P:/R/lakeprofilermd")
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
library(htmlwidgets)
#first access list of sites from wqp
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("(", "", results$MonitoringLocationName) #breaks my filename loops
View(results)
results$MonitoringLocationName <- gsub("\\(([^)]+)\\)", "\\1", results$MonitoringLocationName) #breaks my filename loops
View(results)
#script to make the html plots and save them
#and also create the rmd on a loop
setwd("P:/R/lakeprofilermd")
library(dplyr)
library(ggplot2)
library(plotly)
library(lubridate)
library(htmlwidgets)
#first access list of sites from wqp
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("\\(([^)]+)\\)", "\\1", results$MonitoringLocationName) #breaks my filename loops
colnames(results)[colnames(results) == "ResultMeasureValue"] <- "Value" #to be nicer on the graph
colnames(results)[colnames(results) == "ActivityDepthHeightMeasure.MeasureValue"] <- "Depth"
#for each site sampling day,  generate grouped plots
output_dir <- "P:/R/lakeprofilermd/plots"
unique_combinations <- unique(results %>% select(MonitoringLocationName, ActivityStartDate, CharacteristicName))
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "<br>",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots" )
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots")
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 600, height = 600,
units = "px")
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 1000, height = 1000,
units = "px")
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 1200, height = 1200,
units = "px")
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 600, height = 600,
units = "px")
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 600, height = 600,
units = "px", dpi = 100)
}
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 400, height = 400,
units = "px", dpi = 80)
}
View(results)
#script to make the html plots and save them
#and also create the rmd on a loop
setwd("P:/R/lakeprofilermd")
library(dplyr)
library(ggplot2)
#library(plotly)
library(lubridate)
#library(htmlwidgets)
#first access list of sites from wqp
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("\\(([^)]+)\\)", "\\1", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub("/", "-", results$MonitoringLocationName) #breaks my filename loops
colnames(results)[colnames(results) == "ResultMeasureValue"] <- "Value" #to be nicer on the graph
colnames(results)[colnames(results) == "ActivityDepthHeightMeasure.MeasureValue"] <- "Depth"
#for each site sampling day,  generate grouped plots
output_dir <- "P:/R/lakeprofilermd/plots"
unique_combinations <- unique(results %>% select(MonitoringLocationName, ActivityStartDate, CharacteristicName))
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 400, height = 400,
units = "px", dpi = 100)
}
#plots made by looping over unique characteristic, also group by sampling date
#save each plot to subfolder with the monitoringlocationid
#in making rmd script, the r param should be the locationid
#generate tabs based on number of sampling days
#sampling day tab is paired with pre generated plotly data in the subfolder
write.csv(char_data, "testdf.csv", row.names = FALSE)
View(char_data)
results$MonitoringLocationName <- gsub('"', "", results$MonitoringLocationName) #breaks my filename loops
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("(", "", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub('(', "", results$MonitoringLocationName) #breaks my filename loops
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("(\\(([^)]+)\\))", "\\1", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub("/", "-", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub('"', "", results$MonitoringLocationName) #breaks my filename loops
results <- read.csv("https://www.waterqualitydata.us/data/Result/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&dataProfile=resultPhysChem&providers=NWIS&providers=STORET")
stations <- read.csv("https://www.waterqualitydata.us/data/Station/search?organization=CT_DEP01_WQX&project=lakesABM&project=lakesNLA&mimeType=csv&zip=no&providers=NWIS&providers=STORET")
characteristics <- c("Dissolved oxygen (DO)", "Temperature", "Chlorophyll", "Phycocyanin (probe)")
units_mapping <- c(
"Dissolved oxygen (DO)" = "mg/L",
"Temperature" = "°C",
"Chlorophyll" = "rfu",
"Phycocyanin (probe)" = "rfu"
)
results <- results %>%
filter(CharacteristicName %in% characteristics)
results$datetime <- paste(results$ActivityStartDate, results$ActivityStartTime.Time, sep = " ")
results$datetime <- as.POSIXct(results$datetime, format = "%Y-%m-%d %H:%M:%S")
results$ResultMeasureValue <- as.numeric(results$ResultMeasureValue)
results$MonitoringLocationName <- gsub("\\(|\\)", "", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub("/", "-", results$MonitoringLocationName) #breaks my filename loops
results$MonitoringLocationName <- gsub('"', "", results$MonitoringLocationName) #breaks my filename loops
colnames(results)[colnames(results) == "ResultMeasureValue"] <- "Value" #to be nicer on the graph
colnames(results)[colnames(results) == "ActivityDepthHeightMeasure.MeasureValue"] <- "Depth"
#for each site sampling day,  generate grouped plots
output_dir <- "P:/R/lakeprofilermd/plots"
unique_combinations <- unique(results %>% select(MonitoringLocationName, ActivityStartDate, CharacteristicName))
for (i in 1:nrow(unique_combinations)) {
combination <- unique_combinations[i, ]
# Subset the data for the current combination
char_data <- results %>%
filter(MonitoringLocationName == combination$MonitoringLocationName &
ActivityStartDate == combination$ActivityStartDate &
CharacteristicName == combination$CharacteristicName) %>%
distinct(Depth, .keep_all = TRUE) %>%
arrange(Depth) # this doesnt do anything lol
units <- units_mapping[combination$CharacteristicName]
# Create the ggplot
p <- ggplot(char_data, aes(y = Value, x = Depth, group = 1)) +
geom_line() +
scale_x_reverse() +
coord_flip() +
labs(title = paste(combination$MonitoringLocationName, ", ",
combination$ActivityStartDate, "\n",
"Parameter: ", combination$CharacteristicName, sep = ""),
y = paste(combination$CharacteristicName, " ",  "(",  units, ")", sep = ""),
x = "Depth (m)") +
theme_minimal()
#p_plotly <- ggplotly(p)
# Define the filename
lake <- combination$MonitoringLocationName
date <- combination$ActivityStartDate
characteristic <- combination$CharacteristicName
filename <- paste(lake, "_", date, "_", characteristic, ".png", sep = "")
# Save the plotly plot as HTML
ggsave(filename, path = "P:/R/lakeprofilermd/plots", width = 400, height = 400,
units = "px", dpi = 100)
}
