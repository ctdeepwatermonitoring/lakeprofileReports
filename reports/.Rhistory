mim <- 'mimeType=csv&'
prv <- 'zip=no&providers=NWIS'
ss_url <- paste0(b_ss, site, mim, prv)
ss_url
data <- read.csv(ss_url, header = TRUE)
available_data <- whatNWISdata(siteNumber= "01184490")
available_data <- whatNWISdata(stateCd = "CT",
parameterCd = "00665")
available_data <- whatNWISdata(siteNumber = "01184490")
whatNWISdata(siteNumber = "USGS-01184490")
whatNWISdata(siteNumber = "05114000")
available_data <- whatWQPdata(siteid = "USGS-01184490")
WqData <- whatWQPdata(siteid = "USGS-01184490")
WqData[1:10,]
dim(WqData)
WqData
readNWISdata(sites = "01184490",
siteStatus = "all",
outputDataTypeCd = c("dv","qw"),
service="site")
readNWISdata(sites = "01184490",
siteStatus = "all",
outputDataTypeCd = c("dv","qw"),
service="site")
data <- readNWISdata(sites = "01184490",siteStatus = "all", outputDataTypeCd = c("dv","qw"), service="site")
# base url for result info
base <- 'https://www.waterqualitydata.us/data/Result/search?'
# site
site <- 'siteid=USGS-01184490&'
# Type of file to retrieve
mim <- 'mimeType=csv&'
prv <- 'zip=no&providers=NWIS'
rurl <- paste0(base, site, mim, prv)
data <- read.csv(rurl, header = TRUE)
stNo <- 'USGS-01184490'
site <- paste0('siteid=',stNo,'&')
site
dim(data)
# base url for result info
base <- 'https://www.waterqualitydata.us/data/Result/search?'
# site
stNo <- 'USGS-01184490'
site <- paste0('siteid=',stNo,'&')
# Type of file to retrieve
mim <- 'mimeType=csv&'
prv <- 'zip=no&providers=NWIS'
rurl <- paste0(base, site, mim, prv)
data <- read.csv(rurl, header = TRUE)
names(data)
data[1:10,]
names(data)
data <- data[data$USGSPCode %in% parameterCd,]
parameterCd <- c("00608", "00940", "00300", "90902")
data <- data[data$USGSPCode %in% parameterCd,]
dim(data)
data
base <- 'https://www.waterqualitydata.us/data/Result/search?'
# site
stNo <- 'USGS-01184490'
site <- paste0('siteid=',stNo,'&')
# Type of file to retrieve
mim <- 'mimeType=csv&'
prv <- 'zip=no&providers=NWIS'
rurl <- paste0(base, site, mim, prv)
data <- read.csv(rurl, header = TRUE)
names(data)
unique(df[c("USGSPCode", "CharacteristicName")])
unique(data[c("USGSPCode", "CharacteristicName")])
pCd_sum <- unique(data[c("USGSPCode", "CharacteristicName")])
View(pCd_sum)
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
pCd_sum[pCd_sum$USGSPCode %in% pCd]
names(pCd_sum)
pCd <- c("608", "940", "300", "90902")
pCd_sum[pCd_sum$USGSPCode %in% pCd]
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
names(data)
data[1:10,]
names(data)
data <- data[,c(1:9, 22, 25:26, 27:27,46)]
names(data)
data[1:10,]
data <- read.csv(rurl, header = TRUE)
data <- data[,c(1:9, 22, 25:26, 27:37,46)]
data[1:10,]
pCd_sum <- unique(data[c("USGSPCode", "CharacteristicName")])
dim(pCd_sum)
pCd <- c("608", "940", "300", "90902")
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
pdat <- data[data$USGSPCode %in% pCd,]
pdat
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
readNWISdata(sites = "01184490",
siteStatus = "all",
parameterCd = "00060",
service="dv")
readNWISdata(sites = "01184490",
startDT = "1970-01-01",
endDT = "2025-01-01",
siteStatus = "all",
parameterCd = "00060",
service="dv")
startDate <- as.Date("1970-10-01")
endDate <- as.Date("2024-09-30")
dischg <- readNWISdata(
sites = "01184490",
parameterCd = "00060",
service = "dv",
startDate = startDate,
endDate = endDate
)
dischg_data <- read.table('https://nwis.waterservices.usgs.gov/nwis/dv/?format=rdb&sites=01184490&startDT=1970-01-01&endDT=2025-01-01&siteStatus=all&parameterCd=00060')
dischg_data[1:10,]
dischg_data <- read.table('https://nwis.waterservices.usgs.gov/nwis/dv/?format=rdb&sites=01184490&startDT=1970-01-01&endDT=2025-01-01&siteStatus=all&parameterCd=00060',skip = c(1,3), header = TRUE)
dischg_data[1:10,]
dischg_data <- read.table('https://nwis.waterservices.usgs.gov/nwis/dv/?format=rdb&sites=01184490&startDT=1970-01-01&endDT=2025-01-01&siteStatus=all&parameterCd=00060',skip = 1, header = TRUE)
wqpb <- 'https://www.waterqualitydata.us/data/Result/search?'
# site
stNo <- '01184490'
site <- paste0('siteid=USGS-',stNo,'&')
# type of file to retrieve
mim <- 'mimeType=csv&'
prv <- 'zip=no&providers=NWIS'
# paste together request url
wqp_url <- paste0(wqpb, site, mim, prv)
## Build NWIS web request url###################################################
nwsb <- 'https://nwis.waterservices.usgs.gov/nwis/dv/?'
frmt <- 'format=rdb&'
nwss <- paste0('sites=',site,'&')
sdat <- 'startDT=1970-01-01&'
edat <- 'endDT=2025-01-01'
nwsc <- 'parameterCd=00060'
nws_url <- paste0(nwsb, frmt, nwss, sdat, edat, nwsc)
# request data from WQP
wqpd <- read.csv(wqp_url, header = TRUE)
wqpd[1:10,]
wqpd <- wqpd[,c(1:9, 22, 25:26, 27:37,46)]
wqpd[1:10,]
pCd_sum <- unique(wqpd[c("USGSPCode", "CharacteristicName")])
# list parameters Codes of Interest
pCd <- c("608", "940", "300", "90902")
# Check out chacteristic names to make sure they match
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
# get data for specified parameters codes of interest
pdat <- wqp[wqp$USGSPCode %in% pCd,]
pdat <- wqpd[wqpd$USGSPCode %in% pCd,]
nwsd <- read.table(nws_url, skip = 1, header = TRUE)
paste0('sites=',site,'&')
nwss <- paste0('sites=',stNo,'&')
paste0('sites=',stNo,'&')
nwsb <- 'https://nwis.waterservices.usgs.gov/nwis/dv/?'
frmt <- 'format=rdb&'
nwss <- paste0('sites=',stNo,'&')
sdat <- 'startDT=1970-01-01&'
edat <- 'endDT=2025-01-01&'
nwsc <- 'parameterCd=00060'
nws_url <- paste0(nwsb, frmt, nwss, sdat, edat, nwsc)
nwsd <- read.table(nws_url, skip = 1, header = TRUE)
nwsd[1:10,]
nwsd[2:,]
dim(nwsd)
nwsd <- nwsd[2:dim[1],]
dim[1]
nwsd <- nwsd[2:dim(nwsd)[1],]
dim(nwsd)
nwsd[1:10,]
nwsd[18046,]
pdat[1:10,]
library(jsonlite)
library(lubridate)
## Old bloomWatch
# base    <- "https://services5.arcgis.com/ffJESZQ7ml5P9xH7/ArcGIS/rest/services/"
# survey  <- "bloomWatch_Public_view/"
# feature <- "FeatureServer/0/"
# cntqry  <- "query?where=1%3D1&outFields=*&returnGeometry=true&returnCountOnly=true&f=pjson&token="
# rcnturl <- paste0(base,survey,feature,cntqry)
# qcnt    <- fromJSON(rcnturl)$count - 1000
# query   <- paste0("query?where=1%3D1&outFields=*&resultOffset=",qcnt,"&returnGeometry=true&f=json")
# eurl    <- paste0(base,survey,feature,query)
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
query   <- paste0("query?where=where=1%3D1&outFields=*&outFields=*&returnGeometry=true&f=json")
#query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
query   <- paste0("query?where=where=1%3D1&outFields=*&returnGeometry=true&f=json")
#query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
#query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
dim(bdata)
bdata[220:232,]
base    <- "https://services5.arcgis.com/ffJESZQ7ml5P9xH7/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
cntqry  <- "query?where=1%3D1&outFields=*&returnGeometry=true&returnCountOnly=true&f=pjson&token="
rcnturl <- paste0(base,survey,feature,cntqry)
qcnt    <- fromJSON(rcnturl)$count - 1000
query   <- paste0("query?where=1%3D1&outFields=*&resultOffset=",qcnt,"&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
eurl
base    <- "https://services5.arcgis.com/ffJESZQ7ml5P9xH7/ArcGIS/rest/services/"
survey  <- "survey123_2bd9b97d23124dbfae7df325f106039b_stakeholder/"
feature <- "FeatureServer/0/"
cntqry  <- "query?where=1%3D1&outFields=*&returnGeometry=true&returnCountOnly=true&f=pjson&token="
rcnturl <- paste0(base,survey,feature,cntqry)
qcnt    <- fromJSON(rcnturl)$count - 1000
query   <- paste0("query?where=1%3D1&outFields=*&resultOffset=",qcnt,"&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
# base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
# survey  <- "bloomWatch_Public_view/"
# feature <- "FeatureServer/0/"
# #where=1%3D1&outFields=* to get all data
# # query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
# query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
# eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
dim(bdata)
bdata[1000,]
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
# query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
# query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
dim(bdata)
bdata[,232]
bdata[,c(232)]
bdata[,c(231)]
bdata[231,]
library(jsonlite)
library(lubridate)
## Old bloomWatch
# base    <- "https://services5.arcgis.com/ffJESZQ7ml5P9xH7/ArcGIS/rest/services/"
# survey  <- "survey123_2bd9b97d23124dbfae7df325f106039b_stakeholder/"
# feature <- "FeatureServer/0/"
# cntqry  <- "query?where=1%3D1&outFields=*&returnGeometry=true&returnCountOnly=true&f=pjson&token="
# rcnturl <- paste0(base,survey,feature,cntqry)
# qcnt    <- fromJSON(rcnturl)$count - 1000
# query   <- paste0("query?where=1%3D1&outFields=*&resultOffset=",qcnt,"&returnGeometry=true&f=json")
# eurl    <- paste0(base,survey,feature,query)
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
# query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
View(bdata)
library(jsonlite)
library(lubridate)
## Old bloomWatch
# base    <- "https://services5.arcgis.com/ffJESZQ7ml5P9xH7/ArcGIS/rest/services/"
# survey  <- "survey123_2bd9b97d23124dbfae7df325f106039b_stakeholder/"
# feature <- "FeatureServer/0/"
# cntqry  <- "query?where=1%3D1&outFields=*&returnGeometry=true&returnCountOnly=true&f=pjson&token="
# rcnturl <- paste0(base,survey,feature,cntqry)
# qcnt    <- fromJSON(rcnturl)$count - 1000
# query   <- paste0("query?where=1%3D1&outFields=*&resultOffset=",qcnt,"&returnGeometry=true&f=json")
# eurl    <- paste0(base,survey,feature,query)
base    <- "https://services.arcgis.com/cJ9YHowT8TU7DUyn/ArcGIS/rest/services/"
survey  <- "bloomWatch_Public_view/"
feature <- "FeatureServer/0/"
#where=1%3D1&outFields=* to get all data
# query   <- paste0("query?where=1%3D1&outFields=*&returnGeometry=true&f=json")
query   <- paste0("query?where=state='Connecticut'&outFields=*&returnGeometry=true&f=json")
eurl    <- paste0(base,survey,feature,query)
data_list <- fromJSON(eurl)
att_data  <- data_list$features$attributes
geo_data  <- data_list$features$geometry
bdata     <- cbind(att_data,geo_data)
bdata
install.packages("dataRetrieval", dependencies = TRUE)
library(dataRetrieval)
library(ggplot2)
library(tidyverse)
library(tidyr)
wqpsiteNo <- "USGS-01184490"
data <- readWQPdata(siteNumbers = wqpsiteNo)
# Filter the columns of data by column number
wqpd <- data[,c(1:9, 22, 25:26, 27:37,46)]
pCd_sum <- unique(wqpd[c("USGSPCode", "CharacteristicName")])
pCd <- c("00608", "00940", "00300", "90902", "00631", "00600", "00681", "00065", "00400", "00955", "00095", "80154", "00010", "70303", "00530", "63676")
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
pdat <- wqpd[wqpd$USGSPCode %in% pCd,]
pdat %>% filter(!is.na(pdat$ResultMeasureValue))
pdat %>% filter(!is.na(pdat$ResultMeasure.MeasureUnitCode))
i <- 1
d <- pdat[pdat$USGSPCode == pCd[i],]
d[1:10,]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
ggplot(d, aes(x = ActivityStartDate, y = factor(ResultMeasureValue)))+
stat_boxplot(geom ='errorbar')+
geom_boxplot() +
expand_limits(y = 0)+
xlab("Year")+
ylab(d$ResultMeasure.MeasureUnitCode)+
labs(title = "Broad Brook USGS at Broad Brook, CT")+
theme_bw()+
theme(
axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank()))
pdat <- wqpd[wqpd$USGSPCode %in% pCd,]
pdat[is.na(pdat$ResultMeasureValue),]
dim(pdat[is.na(pdat$ResultMeasureValue),])
dim(pdat[is.na(pdat$ResultMeasure.MeasureUnitCode),])
dim(pdat)
dim(pdat[!is.na(pdat$ResultMeasureValue),])
pdat <- wqpd[wqpd$USGSPCode %in% pCd,]
#get rid of NA
# Base R version so that you don't need an extra package
pdat <- pdat[!is.na(pdat$ResultMeasureValue),]
type(pdat$ActivityStartDate)
class(pdat$ActivityStartDate)
class(pdat$ResultMeasureValue)
d <- pdat[pdat$USGSPCode == pCd[i],]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
d$month <- month.abb[as.numeric(format(d$ActivityStartDate, "%m"))]
d$month <- factor(d$month, levels = month.abb)
ggplot(d, aes(x = month, y = ResultMeasureValue))+
stat_boxplot(geom ='errorbar')+
geom_boxplot() +
expand_limits(y = 0)+
xlab("Year")+
ylab(d$ResultMeasure.MeasureUnitCode)+
labs(title = "Broad Brook USGS at Broad Brook, CT")+
theme_bw()+
theme(
axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank()))
ggplot(d, aes(x = month, y = ResultMeasureValue))+
stat_boxplot(geom ='errorbar')+
geom_boxplot() +
expand_limits(y = 0)+
xlab("Year")+
ylab(d$ResultMeasure.MeasureUnitCode)+
labs(title = "Broad Brook USGS at Broad Brook, CT")+
theme_bw()+
theme(
axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank())
pCd[i]
names(d)
d$CharacteristicName
getwd9
getwd()
for(i in 1:length(pCd)){
d <- pdat[pdat$USGSPCode == pCd[i],]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
d$month <- month.abb[as.numeric(format(d$ActivityStartDate, "%m"))]
d$month <- factor(d$month, levels = month.abb)
d_plt <- ggplot(d, aes(x = month, y = ResultMeasureValue)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot() +
expand_limits(y = 0) +
xlab("Month") +
ylab(d$ResultMeasure.MeasureUnitCode) +
labs(title = "Broad Brook USGS at Broad Brook, CT") +
theme_bw() +
theme(axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank())
ggsave(paste0(getwd(),d$CharacteristicName,"_boxplot.png"))
}
paste0(getwd(),d$CharacteristicName,"_boxplot.png")
for(i in 1:length(pCd)){
d <- pdat[pdat$USGSPCode == pCd[i],]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
d$month <- month.abb[as.numeric(format(d$ActivityStartDate, "%m"))]
d$month <- factor(d$month, levels = month.abb)
d_plt <- ggplot(d, aes(x = month, y = ResultMeasureValue)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot() +
expand_limits(y = 0) +
xlab("Month") +
ylab(d$ResultMeasure.MeasureUnitCode) +
labs(title = "Broad Brook USGS at Broad Brook, CT") +
theme_bw() +
theme(axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank())
ggsave(paste0(getwd(),"/plots",d$CharacteristicName,"_boxplot.png"))
}
for(i in 1:length(pCd)){
d <- pdat[pdat$USGSPCode == pCd[i],]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
d$month <- month.abb[as.numeric(format(d$ActivityStartDate, "%m"))]
d$month <- factor(d$month, levels = month.abb)
d_plt <- ggplot(d, aes(x = month, y = ResultMeasureValue)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot() +
expand_limits(y = 0) +
xlab("Month") +
ylab(d$ResultMeasure.MeasureUnitCode) +
labs(title = "Broad Brook USGS at Broad Brook, CT") +
theme_bw() +
theme(axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank())
ggsave(paste0(getwd(),"/plots/",d$CharacteristicName,"_boxplot.png"))
}
library(dataRetrieval)
library(ggplot2)
wqpsiteNo <- "USGS-01184490"
data <- readWQPdata(siteNumbers = wqpsiteNo)
# Filter the columns of data by column number
wqpd <- data[,c(1:9, 22, 25:26, 27:37,46)]
# get all of the parameter codes and parameters names in the dataset
pCd_sum <- unique(wqpd[c("USGSPCode", "CharacteristicName")])
# list parameters Codes of Interest
pCd <- c("00608", "00940", "00300", "90902", "00631", "00600", "00681", "00065", "00400", "00955", "00095", "80154", "00010", "70303", "00530", "63676")
# Check out characteristic names to make sure they match
pCd_sum[pCd_sum$USGSPCode %in% pCd,]
# get data for specified parameters codes of interest
pdat <- wqpd[wqpd$USGSPCode %in% pCd,]
#get rid of NA
# Base R version so that you don't need an extra package
pdat <- pdat[!is.na(pdat$ResultMeasureValue),]
# pdat %>% filter(!is.na(pdat$ResultMeasureValue))
# pdat %>% filter(!is.na(pdat$ResultMeasure.MeasureUnitCode))
for(i in 1:length(pCd)){
d <- pdat[pdat$USGSPCode == pCd[i],]
d$ResultMeasureValue <- as.numeric(d$ResultMeasureValue)
d$ActivityStartDate <- as.Date.numeric(d$ActivityStartDate)
d$month <- month.abb[as.numeric(format(d$ActivityStartDate, "%m"))]
d$month <- factor(d$month, levels = month.abb)
d_plt <- ggplot(d, aes(x = month, y = ResultMeasureValue)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot() +
expand_limits(y = 0) +
xlab("Month") +
ylab(d$ResultMeasure.MeasureUnitCode) +
labs(title = "Broad Brook USGS at Broad Brook, CT") +
theme_bw() +
theme(axis.ticks.length = unit(-0.05, "in"),
panel.grid = element_blank())
ggsave(paste0(getwd(),"/",d$CharacteristicName,"_boxplot.png"))
}
setwd("C:/Users/deepuser/Documents/Projects/ProgramDev/lakeprofileReports/reports")
list.files()
lp <- data.frame(list.files(lw_rpt_path, pattern = "\\.html$",
ignore.case = TRUE))
